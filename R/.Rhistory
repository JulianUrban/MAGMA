cores = cores)
rm(value_matrix)
rm(means)
gc()
distance_mean <- rowMeans(distance_matrix)
distance_array <- array(data = distance_mean, dim = elements_temp)
rm(distance_matrix)
rm(distance_mean)
gc()
group_list_temp <- match_iterative(distance_array, group_list_temp, elements_temp)
rm(distance_array)
gc()
random_list[[i]] <- do.call(rbind.data.frame, group_list_temp)
}
data_temp <- do.call(rbind.data.frame, random_list)
data_temp <- data_temp[order(data_temp$step, data_temp$distance),]
data_temp$step <- ceiling(c(1:nrow(input))/4)
data_temp <- data_temp[!is.na(data_temp$weight), c("ID", "step", "weight", "distance")]
data <- merge(data,
data_temp,
by = "ID",
all.x = T)
}
} else {
stop("Specify a grouping variable that distinguishes 2, 3, or 4 groups or represent a 2x2 Design!")
}
cat("\n", "Matching complete!")
return(data)
} else {
var_ma <- input[c("distance_ps_1", "distance_ps_2")] %>%
sapply(FUN = stats::var)
group_list <- split.data.frame(input, input$group)
elements <- split(input$group_id, input$group) %>%
sapply(FUN = max)
if (prod(elements) < 1.0e+09) {
value_matrix <- build_value_matrix(group_list, elements)
means <- rowMeans(value_matrix)
distance_matrix_1 <- distance_estimator(data = value_matrix,
means = means,
variance = var_ma[1],
cores = cores)
value_matrix <- build_value_matrix(group_list, elements)
means <- rowMeans(value_matrix)
distance_matrix_2 <- distance_estimator(data = value_matrix,
means = means,
variance = var_ma[2],
cores = cores)
rm(means)
rm(value_matrix)
distance_array <- array(data = (distance_matrix_1 +
distance_matrix_2 +
distance_matrix_1 * distance_matrix_2),
dim = elements)
rm(distance_matrix)
rm(distance_matrix_2)
gc()
group_list <- match_iterative(distance_array, group_list, elements)
rm(distance_array)
gc()
output_temp <- do.call(rbind.data.frame, group_list)
output_temp <- output_temp[c("ID", "step", "weight", "distance")]
data <- merge(data,
output_temp,
by = "ID",
all.x = TRUE)
cat("\n", "matching complete!")
return(data)
} else {
cores <- 2
cat("\n", "Large number of groups with large group sizes. Computing quasi-systematic matching. Cores were reduced to 2 to simplify node communication despite high RAM usage.")
number_split_groups <- ceiling(sqrt(prod(elements) / 1.0e+09)) + 1
if(number_split_groups == 1) {
number_split_groups <- 2
}
initial_seed <- .Random.seed
set.seed(28062022)
input <- input$random_group <- floor(stats::runif(nrow(input),
1, number_split_groups))
random_list <- split.data.frame(input, input$random_group)
.Random.seed <- initial_seed
for(i in 1:length(random_list)) {
group_list_temp <- random_list[[i]] %>%
split.data.frame(f = random_list[[i]]$group)
elements_temp <- sapply(group_list_temp, nrow)
value_matrix <- build_value_matrix(group_list_temp,
elements_temp,
name_ps = "distance_ps_1")
means <- rowMeans(value_matrix)
distance_matrix_1 <- distance_estimator(data = value_matrix,
means = means,
variance = var_ma[1],
cores = cores)
value_matrix <- build_value_matrix(group_list_temp,
elements_temp,
name_ps = "distance_ps_2")
means <- rowMeans(value_matrix)
distance_matrix_2 <- distance_estimator(data = value_matrix,
means = means,
variance = var_ma[2],
cores = cores)
rm(means)
rm(value_matrix)
distance_array <- array(data = ((distance_matrix_1 +
distance_matrix_2 +
distance_matrix_1 * distance_matrix_2)),
dim = elements_temp)
rm(distance_matrix_1)
rm(distance_matrix_2)
gc()
group_list_temp <- match_iterative(distance_array, group_list_temp, elements_temp)
rm(distance_array)
gc()
random_list[[i]] <- do.call(rbind.data.frame, group_list_temp)
}
data_temp <- do.call(rbind.data.frame, random_list)
data_temp <- data_temp[order(data_temp$step, data_temp$distance),]
data_temp$step <- ceiling(c(1:nrow(input))/4)
data_temp <- data_temp[!is.na(data_temp$weight), c("ID", "step", "weight", "distance")]
data <- merge(data,
data_temp,
by = "ID",
all.x = TRUE)
cat("\n", "Matching complete!")
return(data)
}
}
}
MAGMA_sim_data_gifted <- MAGMA_x(Data = MAGMA_sim_data,
group = "gifted_support",
dist = "ps_gifted",
cores = 1,
verbose = TRUE)
MAGMA_sim_data_gifted <- MAGMA_x(Data = MAGMA_sim_data,
group = "gifted_support",
dist = "ps_gifted",
cores = 1,
verbose = FALSE)
#' # Running this code will take a while
#' # Two-group exact matching using the data set 'MAGMA_sim_data'
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
#' # 'MAGMA_sim_data_gifted_exact' contains the result of the matching
#' # Exact matching for 'enrichment' (participated in enrichment or not)
#' # Students that participated can only be matched with other
#' # students that participated and vice versa
microbenchmark::microbenchmark({
MAGMA_sim_data_gifted_exact <- MAGMA_exact(Data = MAGMA_sim_data,
group = "gifted_support",
dist = "ps_gifted",
exact = "enrichment",
cores = 2)
head(MAGMA_sim_data_gifted_exact)}, times = 5)
MAGMA_sim_data_gifted_exact <- MAGMA_exact(Data = MAGMA_sim_data,
group = "gifted_support",
dist = "ps_gifted",
exact = "enrichment",
cores = 1)
#' # Running this code will take a while
#' # Two-group exact matching using the data set 'MAGMA_sim_data'
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
#' # 'MAGMA_sim_data_gifted_exact' contains the result of the matching
#' # Exact matching for 'enrichment' (participated in enrichment or not)
#' # Students that participated can only be matched with other
#' # students that participated and vice versa
microbenchmark::microbenchmark({
MAGMA_sim_data_gifted_exact <- MAGMA_exact(Data = MAGMA_sim_data,
group = "gifted_support",
dist = "ps_gifted",
exact = "enrichment",
cores = 1)
head(MAGMA_sim_data_gifted_exact)}, times = 5)
#' # Estimating density overlap using the data set 'MAGMA_sim_data
#' # Estimating density overlap for 'ps_gifted' (propensity scores for
#' # giftedness support)
#' # Defining plot aesthetics with 'group', 'variable_name', "group_lables',
#' # and 'group_name'
#' # Estimating pre-matching density overlap by not specifying 'step_num' and
#' # 'step_var'
microbenchmark::microbenchmark(
Density_overlap(Data = MAGMA_sim_data,
variable = "ps_gifted",
group = "gifted_support",
step_num = NULL,
step_var = NULL,
variable_name = "Propensity Score",
group_labels = c("No Support", "Support"),
group_name = "Gifted Support"), times = 5)
x<- Density_overlap(Data = MAGMA_sim_data,
variable = "ps_gifted",
group = "gifted_support",
step_num = NULL,
step_var = NULL,
variable_name = "Propensity Score",
group_labels = c("No Support", "Support"),
group_name = "Gifted Support")
#' # Estimating density overlap using the data set 'MAGMA_sim_data
#' # Estimating density overlap for 'ps_gifted' (propensity scores for
#' # giftedness support)
#' # Defining plot aesthetics with 'group', 'variable_name', "group_lables',
#' # and 'group_name'
#' # Estimating pre-matching density overlap by not specifying 'step_num' and
#' # 'step_var'
microbenchmark::microbenchmark({
x<- Density_overlap(Data = MAGMA_sim_data,
variable = "ps_gifted",
group = "gifted_support",
step_num = NULL,
step_var = NULL,
variable_name = "Propensity Score",
group_labels = c("No Support", "Support"),
group_name = "Gifted Support")
#'
#'
#' # Estimating density overlap using the matched data set
#' #'MAGMA_sim_data_gifted'
#' # Estimating density overlap for 'ps_gifted' (propensity scores for
#' # giftedness support)
#' # Defining plot aesthetics with 'group', 'variable_name', 'group_lables',
#' # and 'group_name'
#' # Estimating post-matching overlap for 250 cases per group ('step_num')
#' # Name of the step variable is 'step'
Density_overlap(Data = MAGMA_sim_data_gifted,
variable = "ps_gifted",
group = "gifted_support",
step_num = 250,
step_var = "step",
variable_name = "Propensity Score",
group_labels = c("No Support", "Support"),
group_name = "Gifted Support")
#'
#' # Estimating density overlap using the data set 'MAGMA_sim_data
#' # Estimating density overlap for 'teacher_ability_rating' (ability rated
#' # from teacher as below average, average, or above average)
#' # Defining plot aesthetics with 'group', 'variable_name', 'group_lables',
#' # and 'group_name'
#' # Estimating pre-matching density overlap by not specifying 'step_num' and
#' # 'step_var'
Density_overlap(Data = MAGMA_sim_data,
variable = "GPA_school",
group = "teacher_ability_rating",
variable_name = "School Achievement",
group_labels = c("Low", "Medium", "High"),
group_name = "Rating")}
, times = 5)
load("C:/Users/urbanjn/OneDrive - GESIS – Leibniz-Institut für Sozialwissenschaften e.V/Dokumente/Forschung/Hbf/MAGMA/R Package/CRAN/MAGMA/data/MAGMA_sim_data.rda")
MAGMA_sim_data <- MAGMA.R::MAGMA(MAGMA_sim_data, "gifted_support", "ps_gifted")
save(MAGMA_sim_data, "MAGMA_sim_data.rda")
save(MAGMA_sim_data, file = "MAGMA_sim_data.rda")
load("C:/Users/urbanjn/OneDrive - GESIS – Leibniz-Institut für Sozialwissenschaften e.V/Dokumente/Forschung/Hbf/MAGMA/R Package/CRAN/MAGMA/data/MAGMA_sim_data.rda")
load("C:/Users/urbanjn/OneDrive - GESIS – Leibniz-Institut für Sozialwissenschaften e.V/Dokumente/Forschung/Hbf/MAGMA/R Package/CRAN/MAGMA/data/MAGMA_sim_data.rda")
x<-colnames(MAGMA_sim_data)
x[17] <- "distance_gifted"
x[16] <- "weight_gifted"
x[15] <- "step_gifted"
colnames(MAGMA_sim_data) <- x
save(MAGMA_sim_data, file = "MAGMA_sim_data.rda")
load("C:/Users/urbanjn/OneDrive - GESIS – Leibniz-Institut für Sozialwissenschaften e.V/Dokumente/Forschung/Hbf/MAGMA/R Package/CRAN/MAGMA/data/MAGMA_sim_data.rda")
#'
#'
#' # Estimating density overlap using the matched data set
#' #'MAGMA_sim_data_gifted'
#' # Estimating density overlap for 'ps_gifted' (propensity scores for
#' # giftedness support)
#' # Defining plot aesthetics with 'group', 'variable_name', 'group_lables',
#' # and 'group_name'
#' # Estimating post-matching overlap for 250 cases per group ('step_num')
#' # Name of the step variable is 'step'
Density_overlap(Data = MAGMA_sim_data,
variable = "ps_gifted",
group = "gifted_support",
step_num = 250,
step_var = "step_gifted",
variable_name = "Propensity Score",
group_labels = c("No Support", "Support"),
group_name = "Gifted Support")
microbenchmark::microbenchmark{
microbenchmark::microbenchmark({
#' # Defining covariates
covariates_gifted <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "sex")
#'
#' # Estimating pre-matching descriptive statistics and pairwise effects using
#' # the data set 'MAGMA_sim_data'
#' # Estimating statistics for grouping variable 'gifted support' (received
#' # giftedness support yes or no)
MAGMA_desc(Data = MAGMA_sim_data,
covariates = covariates_gifted,
group =  "gifted_support")
#'
#'
#' # Estimating post-matching descriptive statistics and pairwise effects using
#' # the data set 'MAGMA_sim_data'
#' # Estimating statistics for grouping variable 'gifted support' (received
#' # giftedness support yes or no)
#' # Estimating statistics for 100 cases per group
MAGMA_desc(Data = MAGMA_sim_data,
covariates = covariates_gifted,
group =  "gifted_support",
step_num = 100,
step_var = "step_gifted")
#'
}, times = 10)
microbenchmark::microbenchmark({
#' # Defining covariates
covariates_gifted <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#' # Estimating pre-matching descriptive statistics and pairwise effects using
#' # the data set 'MAGMA_sim_data'
#' # Estimating statistics for grouping variable 'gifted support' (received
#' # giftedness support yes or no)
MAGMA_desc(Data = MAGMA_sim_data,
covariates = covariates_gifted,
group =  "gifted_support")
#'
#'
#' # Estimating post-matching descriptive statistics and pairwise effects using
#' # the data set 'MAGMA_sim_data'
#' # Estimating statistics for grouping variable 'gifted support' (received
#' # giftedness support yes or no)
#' # Estimating statistics for 100 cases per group
MAGMA_desc(Data = MAGMA_sim_data,
covariates = covariates_gifted,
group =  "gifted_support",
step_num = 100,
step_var = "step_gifted")
#'
}, times = 10)
, timer = 10}
microbenchmark::microbenchmark({
#' # Defining covariates for balance estimation
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#' # Computing initial unbalance using the data set 'MAGMA_sim_data'
#' # Computing initial unbalance for the variable 'gifted_support' (received
#' # giftedness support yes or no)
unbalance_gifted <- initial_unbalance(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector)
unbalance_gifted
#'
#' # Computing initial unbalance using the data set 'MAGMA_sim_data'
#' # Computing initial unbalance for the variable 'teacher_ability_rating'
#' # (ability rated from teacher as below average, average, or above average)
unbalance_tar <- initial_unbalance(Data = MAGMA_sim_data,
group = "teacher_ability_rating",
covariates = covariates_vector)
unbalance_tar
#'
#' # Computing initial unbalance using the data set 'MAGMA_sim_data'
#' # Computing initial unbalance for the variables 'gifted_support' (received
#' # giftedness support yes or no) and 'enrichment' (participated in enrichment
#' # or not)
unbalance_2x2 <- initial_unbalance(Data = MAGMA_sim_data,
group = c("gifted_support", "enrichment"),
covariates = covariates_vector)
unbalance_2x2}, timer = 10)
microbenchmark::microbenchmark({
#' # Defining covariates for balance estimation
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#' # Computing initial unbalance using the data set 'MAGMA_sim_data'
#' # Computing initial unbalance for the variable 'gifted_support' (received
#' # giftedness support yes or no)
unbalance_gifted <- initial_unbalance(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector)
unbalance_gifted
#'
#' # Computing initial unbalance using the data set 'MAGMA_sim_data'
#' # Computing initial unbalance for the variable 'teacher_ability_rating'
#' # (ability rated from teacher as below average, average, or above average)
unbalance_tar <- initial_unbalance(Data = MAGMA_sim_data,
group = "teacher_ability_rating",
covariates = covariates_vector)
unbalance_tar
#'
#' # Computing initial unbalance using the data set 'MAGMA_sim_data'
#' # Computing initial unbalance for the variables 'gifted_support' (received
#' # giftedness support yes or no) and 'enrichment' (participated in enrichment
#' # or not)
unbalance_2x2 <- initial_unbalance(Data = MAGMA_sim_data,
group = c("gifted_support", "enrichment"),
covariates = covariates_vector)
unbalance_2x2}, times = 10)
microbenchmark::microbenchmark({
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#'
#' # Estimating balance of a two-group matching using the data set
#' # 'MAGMA_sim_data'.
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
Balance_gifted <- Balance_MAGMA(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector,
step = "step_gifted")
Table_MAGMA(Balance_gifted)
}, times = 10)
microbenchmark::microbenchmark({
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#' #  Estimating balance of a two-group matching using the data set
#' # 'MAGMA_sim_data'.
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
Balance_gifted <- Balance_MAGMA(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector,
step = "step_gifted")
Plot_MAGMA(Balance = Balance_gifted_exact) #Using default to plot all criteria
}, times = 5)
Plot_MAGMA(Balance = Balance_gifted_exact, criterion = "Pillai") #Using default to plot all criteria
microbenchmark::microbenchmark({
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#' #  Estimating balance of a two-group matching using the data set
#' # 'MAGMA_sim_data'.
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
Balance_gifted <- Balance_MAGMA(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector,
step = "step_gifted")
Plot_MAGMA(Balance = Balance_gifted_exact, criterion = "Pillai") #Using default to plot all criteria
}, times = 5)
Plot_MAGMA(Balance = Balance_gifted_exact, criterion = "Adj_d_ratio") #Using default to plot all criteria
microbenchmark::microbenchmark({
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#' #  Estimating balance of a two-group matching using the data set
#' # 'MAGMA_sim_data'.
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
Balance_gifted <- Balance_MAGMA(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector,
step = "step_gifted")
Plot_MAGMA(Balance = Balance_gifted_exact, criterion = "Adj_d_ratio") #Using default to plot all criteria
}, times = 5)
Plot_MAGMA(Balance = Balance_gifted_exact, criterion = "Adj_d_ratio") #Using default to plot all criteria
microbenchmark::microbenchmark({
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#' #  Estimating balance of a two-group matching using the data set
#' # 'MAGMA_sim_data'.
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
Balance_gifted <- Balance_MAGMA(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector,
step = "step_gifted")
Plot_MAGMA(Balance = Balance_gifted_exact, criterion = "Adj_d_ratio") #Using default to plot all criteria
}, times = 5)
microbenchmark::microbenchmark({
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#' #  Estimating balance of a two-group matching using the data set
#' # 'MAGMA_sim_data'.
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
Balance_gifted <- Balance_MAGMA(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector,
step = "step_gifted")
Plot_MAGMA(Balance = Balance_gifted_exact, criterion = "Adj_d_ratio") #Using default to plot all criteria
}, times = 5)
#'
#' # Pairwise effects
Balance_100_gifted_effects <- Balance_extract(Balance = Balance_gifted,
#'                                               samplesize = 100,
#'                                               effects = TRUE)
Balance_100_gifted_effects}, times = 5)
microbenchmark::microbenchmark({
# Defining the names of the metric and binary covariates
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#'
#' # Estimating balance of a two-group matching using the data set
#' # 'MAGMA_sim_data'.
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
Balance_gifted <- Balance_MAGMA(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector,
step = "step_gifted")
# Balance criteria for 100 cases per group
# Balance criteria
Balance_100_gifted <- Balance_extract(Balance = Balance_gifted,
samplesize = 100,
effects = FALSE)
Balance_100_gifted
#'
#' # Pairwise effects
Balance_100_gifted_effects <- Balance_extract(Balance = Balance_gifted,
samplesize = 100,
effects = TRUE)
Balance_100_gifted_effects}, times = 5)
microbenchmark::microbenchmark({
# Defining the names of the metric and binary covariates
covariates_vector <- c("GPA_school", "IQ_score", "Motivation", "parents_academic", "gender")
#'
#'
#' # Estimating balance of a two-group matching using the data set
#' # 'MAGMA_sim_data'.
#' # Matching variable 'gifted_support' (received giftedness support yes or no)
Balance_gifted <- Balance_MAGMA(Data = MAGMA_sim_data,
group = "gifted_support",
covariates = covariates_vector,
step = "step_gifted")
# Balance criteria for 100 cases per group
# Balance criteria
Balance_100_gifted <- Balance_extract(Balance = Balance_gifted,
samplesize = 100,
effects = FALSE)
Balance_100_gifted
#'
#' # Pairwise effects
Balance_100_gifted_effects <- Balance_extract(Balance = Balance_gifted,
samplesize = 100,
effects = TRUE)
Balance_100_gifted_effects}, times = 10)
